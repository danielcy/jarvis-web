{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar vector = require(\"zrender/lib/core/vector\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\n\nvar Transformable = require(\"zrender/lib/mixin/Transformable\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Simple view coordinate system\r\n * Mapping given x, y to transformd view x, y\r\n */\n\n\nvar v2ApplyTransform = vector.applyTransform; // Dummy transform node\n\nfunction TransformDummy() {\n  Transformable.call(this);\n}\n\nzrUtil.mixin(TransformDummy, Transformable);\n\nfunction View(name) {\n  /**\r\n   * @type {string}\r\n   */\n  this.name = name;\n  /**\r\n   * @type {Object}\r\n   */\n\n  this.zoomLimit;\n  Transformable.call(this);\n  this._roamTransformable = new TransformDummy();\n  this._rawTransformable = new TransformDummy();\n  this._center;\n  this._zoom;\n}\n\nView.prototype = {\n  constructor: View,\n  type: 'view',\n\n  /**\r\n   * @param {Array.<string>}\r\n   * @readOnly\r\n   */\n  dimensions: ['x', 'y'],\n\n  /**\r\n   * Set bounding rect\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n  // PENDING to getRect\n  setBoundingRect: function (x, y, width, height) {\n    this._rect = new BoundingRect(x, y, width, height);\n    return this._rect;\n  },\n\n  /**\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\n  // PENDING to getRect\n  getBoundingRect: function () {\n    return this._rect;\n  },\n\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n  setViewRect: function (x, y, width, height) {\n    this.transformTo(x, y, width, height);\n    this._viewRect = new BoundingRect(x, y, width, height);\n  },\n\n  /**\r\n   * Transformed to particular position and size\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n  transformTo: function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var rawTransform = this._rawTransformable;\n    rawTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    rawTransform.decomposeTransform();\n\n    this._updateTransform();\n  },\n\n  /**\r\n   * Set center of view\r\n   * @param {Array.<number>} [centerCoord]\r\n   */\n  setCenter: function (centerCoord) {\n    if (!centerCoord) {\n      return;\n    }\n\n    this._center = centerCoord;\n\n    this._updateCenterAndZoom();\n  },\n\n  /**\r\n   * @param {number} zoom\r\n   */\n  setZoom: function (zoom) {\n    zoom = zoom || 1;\n    var zoomLimit = this.zoomLimit;\n\n    if (zoomLimit) {\n      if (zoomLimit.max != null) {\n        zoom = Math.min(zoomLimit.max, zoom);\n      }\n\n      if (zoomLimit.min != null) {\n        zoom = Math.max(zoomLimit.min, zoom);\n      }\n    }\n\n    this._zoom = zoom;\n\n    this._updateCenterAndZoom();\n  },\n\n  /**\r\n   * Get default center without roam\r\n   */\n  getDefaultCenter: function () {\n    // Rect before any transform\n    var rawRect = this.getBoundingRect();\n    var cx = rawRect.x + rawRect.width / 2;\n    var cy = rawRect.y + rawRect.height / 2;\n    return [cx, cy];\n  },\n  getCenter: function () {\n    return this._center || this.getDefaultCenter();\n  },\n  getZoom: function () {\n    return this._zoom || 1;\n  },\n\n  /**\r\n   * @return {Array.<number}\r\n   */\n  getRoamTransform: function () {\n    return this._roamTransformable.getLocalTransform();\n  },\n\n  /**\r\n   * Remove roam\r\n   */\n  _updateCenterAndZoom: function () {\n    // Must update after view transform updated\n    var rawTransformMatrix = this._rawTransformable.getLocalTransform();\n\n    var roamTransform = this._roamTransformable;\n    var defaultCenter = this.getDefaultCenter();\n    var center = this.getCenter();\n    var zoom = this.getZoom();\n    center = vector.applyTransform([], center, rawTransformMatrix);\n    defaultCenter = vector.applyTransform([], defaultCenter, rawTransformMatrix);\n    roamTransform.origin = center;\n    roamTransform.position = [defaultCenter[0] - center[0], defaultCenter[1] - center[1]];\n    roamTransform.scale = [zoom, zoom];\n\n    this._updateTransform();\n  },\n\n  /**\r\n   * Update transform from roam and mapLocation\r\n   * @private\r\n   */\n  _updateTransform: function () {\n    var roamTransformable = this._roamTransformable;\n    var rawTransformable = this._rawTransformable;\n    rawTransformable.parent = roamTransformable;\n    roamTransformable.updateTransform();\n    rawTransformable.updateTransform();\n    matrix.copy(this.transform || (this.transform = []), rawTransformable.transform || matrix.create());\n    this._rawTransform = rawTransformable.getLocalTransform();\n    this.invTransform = this.invTransform || [];\n    matrix.invert(this.invTransform, this.transform);\n    this.decomposeTransform();\n  },\n  getTransformInfo: function () {\n    var roamTransform = this._roamTransformable.transform;\n    var rawTransformable = this._rawTransformable;\n    return {\n      roamTransform: roamTransform ? zrUtil.slice(roamTransform) : matrix.create(),\n      rawScale: zrUtil.slice(rawTransformable.scale),\n      rawPosition: zrUtil.slice(rawTransformable.position)\n    };\n  },\n\n  /**\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\n  getViewRect: function () {\n    return this._viewRect;\n  },\n\n  /**\r\n   * Get view rect after roam transform\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\n  getViewRectAfterRoam: function () {\n    var rect = this.getBoundingRect().clone();\n    rect.applyTransform(this.transform);\n    return rect;\n  },\n\n  /**\r\n   * Convert a single (lon, lat) data item to (x, y) point.\r\n   * @param {Array.<number>} data\r\n   * @param {boolean} noRoam\r\n   * @param {Array.<number>} [out]\r\n   * @return {Array.<number>}\r\n   */\n  dataToPoint: function (data, noRoam, out) {\n    var transform = noRoam ? this._rawTransform : this.transform;\n    out = out || [];\n    return transform ? v2ApplyTransform(out, data, transform) : vector.copy(out, data);\n  },\n\n  /**\r\n   * Convert a (x, y) point to (lon, lat) data\r\n   * @param {Array.<number>} point\r\n   * @return {Array.<number>}\r\n   */\n  pointToData: function (point) {\n    var invTransform = this.invTransform;\n    return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];\n  },\n\n  /**\r\n   * @implements\r\n   * see {module:echarts/CoodinateSystem}\r\n   */\n  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\n\n  /**\r\n   * @implements\r\n   * see {module:echarts/CoodinateSystem}\r\n   */\n  convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),\n\n  /**\r\n   * @implements\r\n   * see {module:echarts/CoodinateSystem}\r\n   */\n  containPoint: function (point) {\n    return this.getViewRectAfterRoam().contain(point[0], point[1]);\n  }\n  /**\r\n   * @return {number}\r\n   */\n  // getScalarScale: function () {\n  //     // Use determinant square root of transform to mutiply scalar\n  //     var m = this.transform;\n  //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));\n  //     return det;\n  // }\n\n};\nzrUtil.mixin(View, Transformable);\n\nfunction doConvert(methodName, ecModel, finder, value) {\n  var seriesModel = finder.seriesModel;\n  var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.\n\n  return coordSys === this ? coordSys[methodName](value) : null;\n}\n\nvar _default = View;\nmodule.exports = _default;","map":{"version":3,"sources":["D:/code/web/jarvis-web/node_modules/echarts/lib/coord/View.js"],"names":["zrUtil","require","vector","matrix","BoundingRect","Transformable","v2ApplyTransform","applyTransform","TransformDummy","call","mixin","View","name","zoomLimit","_roamTransformable","_rawTransformable","_center","_zoom","prototype","constructor","type","dimensions","setBoundingRect","x","y","width","height","_rect","getBoundingRect","setViewRect","transformTo","_viewRect","rect","rawTransform","transform","calculateTransform","decomposeTransform","_updateTransform","setCenter","centerCoord","_updateCenterAndZoom","setZoom","zoom","max","Math","min","getDefaultCenter","rawRect","cx","cy","getCenter","getZoom","getRoamTransform","getLocalTransform","rawTransformMatrix","roamTransform","defaultCenter","center","origin","position","scale","roamTransformable","rawTransformable","parent","updateTransform","copy","create","_rawTransform","invTransform","invert","getTransformInfo","slice","rawScale","rawPosition","getViewRect","getViewRectAfterRoam","clone","dataToPoint","data","noRoam","out","pointToData","point","convertToPixel","curry","doConvert","convertFromPixel","containPoint","contain","methodName","ecModel","finder","value","seriesModel","coordSys","coordinateSystem","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\nvar vector = require(\"zrender/lib/core/vector\");\r\n\r\nvar matrix = require(\"zrender/lib/core/matrix\");\r\n\r\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\r\n\r\nvar Transformable = require(\"zrender/lib/mixin/Transformable\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * Simple view coordinate system\r\n * Mapping given x, y to transformd view x, y\r\n */\r\nvar v2ApplyTransform = vector.applyTransform; // Dummy transform node\r\n\r\nfunction TransformDummy() {\r\n  Transformable.call(this);\r\n}\r\n\r\nzrUtil.mixin(TransformDummy, Transformable);\r\n\r\nfunction View(name) {\r\n  /**\r\n   * @type {string}\r\n   */\r\n  this.name = name;\r\n  /**\r\n   * @type {Object}\r\n   */\r\n\r\n  this.zoomLimit;\r\n  Transformable.call(this);\r\n  this._roamTransformable = new TransformDummy();\r\n  this._rawTransformable = new TransformDummy();\r\n  this._center;\r\n  this._zoom;\r\n}\r\n\r\nView.prototype = {\r\n  constructor: View,\r\n  type: 'view',\r\n\r\n  /**\r\n   * @param {Array.<string>}\r\n   * @readOnly\r\n   */\r\n  dimensions: ['x', 'y'],\r\n\r\n  /**\r\n   * Set bounding rect\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  // PENDING to getRect\r\n  setBoundingRect: function (x, y, width, height) {\r\n    this._rect = new BoundingRect(x, y, width, height);\r\n    return this._rect;\r\n  },\r\n\r\n  /**\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\r\n  // PENDING to getRect\r\n  getBoundingRect: function () {\r\n    return this._rect;\r\n  },\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setViewRect: function (x, y, width, height) {\r\n    this.transformTo(x, y, width, height);\r\n    this._viewRect = new BoundingRect(x, y, width, height);\r\n  },\r\n\r\n  /**\r\n   * Transformed to particular position and size\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  transformTo: function (x, y, width, height) {\r\n    var rect = this.getBoundingRect();\r\n    var rawTransform = this._rawTransformable;\r\n    rawTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\r\n    rawTransform.decomposeTransform();\r\n\r\n    this._updateTransform();\r\n  },\r\n\r\n  /**\r\n   * Set center of view\r\n   * @param {Array.<number>} [centerCoord]\r\n   */\r\n  setCenter: function (centerCoord) {\r\n    if (!centerCoord) {\r\n      return;\r\n    }\r\n\r\n    this._center = centerCoord;\r\n\r\n    this._updateCenterAndZoom();\r\n  },\r\n\r\n  /**\r\n   * @param {number} zoom\r\n   */\r\n  setZoom: function (zoom) {\r\n    zoom = zoom || 1;\r\n    var zoomLimit = this.zoomLimit;\r\n\r\n    if (zoomLimit) {\r\n      if (zoomLimit.max != null) {\r\n        zoom = Math.min(zoomLimit.max, zoom);\r\n      }\r\n\r\n      if (zoomLimit.min != null) {\r\n        zoom = Math.max(zoomLimit.min, zoom);\r\n      }\r\n    }\r\n\r\n    this._zoom = zoom;\r\n\r\n    this._updateCenterAndZoom();\r\n  },\r\n\r\n  /**\r\n   * Get default center without roam\r\n   */\r\n  getDefaultCenter: function () {\r\n    // Rect before any transform\r\n    var rawRect = this.getBoundingRect();\r\n    var cx = rawRect.x + rawRect.width / 2;\r\n    var cy = rawRect.y + rawRect.height / 2;\r\n    return [cx, cy];\r\n  },\r\n  getCenter: function () {\r\n    return this._center || this.getDefaultCenter();\r\n  },\r\n  getZoom: function () {\r\n    return this._zoom || 1;\r\n  },\r\n\r\n  /**\r\n   * @return {Array.<number}\r\n   */\r\n  getRoamTransform: function () {\r\n    return this._roamTransformable.getLocalTransform();\r\n  },\r\n\r\n  /**\r\n   * Remove roam\r\n   */\r\n  _updateCenterAndZoom: function () {\r\n    // Must update after view transform updated\r\n    var rawTransformMatrix = this._rawTransformable.getLocalTransform();\r\n\r\n    var roamTransform = this._roamTransformable;\r\n    var defaultCenter = this.getDefaultCenter();\r\n    var center = this.getCenter();\r\n    var zoom = this.getZoom();\r\n    center = vector.applyTransform([], center, rawTransformMatrix);\r\n    defaultCenter = vector.applyTransform([], defaultCenter, rawTransformMatrix);\r\n    roamTransform.origin = center;\r\n    roamTransform.position = [defaultCenter[0] - center[0], defaultCenter[1] - center[1]];\r\n    roamTransform.scale = [zoom, zoom];\r\n\r\n    this._updateTransform();\r\n  },\r\n\r\n  /**\r\n   * Update transform from roam and mapLocation\r\n   * @private\r\n   */\r\n  _updateTransform: function () {\r\n    var roamTransformable = this._roamTransformable;\r\n    var rawTransformable = this._rawTransformable;\r\n    rawTransformable.parent = roamTransformable;\r\n    roamTransformable.updateTransform();\r\n    rawTransformable.updateTransform();\r\n    matrix.copy(this.transform || (this.transform = []), rawTransformable.transform || matrix.create());\r\n    this._rawTransform = rawTransformable.getLocalTransform();\r\n    this.invTransform = this.invTransform || [];\r\n    matrix.invert(this.invTransform, this.transform);\r\n    this.decomposeTransform();\r\n  },\r\n  getTransformInfo: function () {\r\n    var roamTransform = this._roamTransformable.transform;\r\n    var rawTransformable = this._rawTransformable;\r\n    return {\r\n      roamTransform: roamTransform ? zrUtil.slice(roamTransform) : matrix.create(),\r\n      rawScale: zrUtil.slice(rawTransformable.scale),\r\n      rawPosition: zrUtil.slice(rawTransformable.position)\r\n    };\r\n  },\r\n\r\n  /**\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\r\n  getViewRect: function () {\r\n    return this._viewRect;\r\n  },\r\n\r\n  /**\r\n   * Get view rect after roam transform\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\r\n  getViewRectAfterRoam: function () {\r\n    var rect = this.getBoundingRect().clone();\r\n    rect.applyTransform(this.transform);\r\n    return rect;\r\n  },\r\n\r\n  /**\r\n   * Convert a single (lon, lat) data item to (x, y) point.\r\n   * @param {Array.<number>} data\r\n   * @param {boolean} noRoam\r\n   * @param {Array.<number>} [out]\r\n   * @return {Array.<number>}\r\n   */\r\n  dataToPoint: function (data, noRoam, out) {\r\n    var transform = noRoam ? this._rawTransform : this.transform;\r\n    out = out || [];\r\n    return transform ? v2ApplyTransform(out, data, transform) : vector.copy(out, data);\r\n  },\r\n\r\n  /**\r\n   * Convert a (x, y) point to (lon, lat) data\r\n   * @param {Array.<number>} point\r\n   * @return {Array.<number>}\r\n   */\r\n  pointToData: function (point) {\r\n    var invTransform = this.invTransform;\r\n    return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];\r\n  },\r\n\r\n  /**\r\n   * @implements\r\n   * see {module:echarts/CoodinateSystem}\r\n   */\r\n  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\r\n\r\n  /**\r\n   * @implements\r\n   * see {module:echarts/CoodinateSystem}\r\n   */\r\n  convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),\r\n\r\n  /**\r\n   * @implements\r\n   * see {module:echarts/CoodinateSystem}\r\n   */\r\n  containPoint: function (point) {\r\n    return this.getViewRectAfterRoam().contain(point[0], point[1]);\r\n  }\r\n  /**\r\n   * @return {number}\r\n   */\r\n  // getScalarScale: function () {\r\n  //     // Use determinant square root of transform to mutiply scalar\r\n  //     var m = this.transform;\r\n  //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));\r\n  //     return det;\r\n  // }\r\n\r\n};\r\nzrUtil.mixin(View, Transformable);\r\n\r\nfunction doConvert(methodName, ecModel, finder, value) {\r\n  var seriesModel = finder.seriesModel;\r\n  var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.\r\n\r\n  return coordSys === this ? coordSys[methodName](value) : null;\r\n}\r\n\r\nvar _default = View;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}